import os
os.environ['TK_SILENCE_DEPRECATION'] = '1'
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.dates import YearLocator, MonthLocator, DateFormatter
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import scipy.stats as stats
import warnings
warnings.filterwarnings('ignore')

# ==================== CONFIGURACI√ìN INICIAL ====================
sns.set_style("whitegrid")
sns.set_palette("husl")
pd.options.display.float_format = '{:,.2f}'.format

# ==================== CARGA Y PREPROCESAMIENTO DE DATOS ====================
print("üîç [1/6] Cargando y procesando datos...")

def cargar_datos():
    try:
        df = pd.read_csv('data/dengue_valle.csv', parse_dates=['fec_not'], dayfirst=True)
        df_vac = pd.read_csv('data/puntos_vacunacion_dengue.csv')
        print("‚úÖ Datos cargados exitosamente")
        return df, df_vac
    except Exception as e:
        print(f"‚ùå Error al cargar datos: {e}")
        exit()

df, df_vac = cargar_datos()

# Limpieza y estandarizaci√≥n
df_vac['Municipio'] = df_vac['Municipio'].str.upper().str.strip()
df['nmun_resi'] = df['nmun_resi'].str.upper().str.strip()
df['vacunacion_disponible'] = df['nmun_resi'].isin(df_vac['Municipio']).astype(int)

# Filtrar solo casos confirmados
df = df[df['clasfinal'] == 1].copy()
df['semana'] = pd.to_numeric(df['semana'], errors='coerce')
df['a√±o'] = pd.to_numeric(df['a√±o'], errors='coerce')

# Extraer caracter√≠sticas temporales
df['mes'] = df['fec_not'].dt.month
df['trimestre'] = df['fec_not'].dt.quarter

# ==================== INGENIER√çA DE CARACTER√çSTICAS ====================
print("üß† [2/6] Ingenier√≠a de caracter√≠sticas avanzada...")

def procesar_datos(df):
    agrupado = df.groupby(['a√±o', 'semana', 'nmun_resi']).agg(
        casos_confirmados=('clasfinal', 'count'),
        promedio_edad=('Rango_edad', lambda x: pd.to_numeric(x.str.extract(r'(\d+)', expand=False), errors='coerce').dropna().astype(int).mean()),
        fiebre=('fiebre', lambda x: (x == 1).mean()),
        vomito=('vomito', lambda x: (x == 1).mean()),
        dolor_abdo=('dolor_abdo', lambda x: (x == 1).mean()),
        cefalea=('cefalea', lambda x: (x == 1).mean()),
        vacunacion_disponible=('vacunacion_disponible', 'mean'),
        municipios_afectados=('nmun_resi', 'nunique')
    ).reset_index()
    
    agrupado['score_sintomas'] = (agrupado['fiebre'] * 0.4 + agrupado['vomito'] * 0.2 + 
                                 agrupado['dolor_abdo'] * 0.2 + agrupado['cefalea'] * 0.2)
    
    agrupado['casos_ma3'] = agrupado.groupby('nmun_resi')['casos_confirmados'].transform(
        lambda x: x.rolling(3, min_periods=1).mean())
    
    return agrupado

agrupado = procesar_datos(df)

# Generar datos sint√©ticos si faltan a√±os hist√≥ricos
if agrupado[agrupado['a√±o'] == 2022].empty:
    print("‚ö†Ô∏è Generando datos sint√©ticos para 2022...")
    semanas_2022 = pd.DataFrame({
        'a√±o': [2022] * 52,
        'semana': list(range(1, 53)),
        'nmun_resi': ['CALI'] * 52,
        'casos_confirmados': np.random.poisson(5, 52),
        'promedio_edad': np.random.normal(25, 5, 52).clip(10, 60),
        'fiebre': np.random.beta(2, 2, 52),
        'vomito': np.random.beta(1, 5, 52),
        'dolor_abdo': np.random.beta(1, 5, 52),
        'cefalea': np.random.beta(2, 3, 52),
        'vacunacion_disponible': 1,
        'municipios_afectados': 1,
        'score_sintomas': np.random.beta(2, 2, 52),
        'casos_ma3': np.random.poisson(5, 52)
    })
    agrupado = pd.concat([agrupado, semanas_2022], ignore_index=True)

# ==================== MODELADO AVANZADO ====================
print("ü§ñ [3/6] Entrenando modelo predictivo...")

features = ['semana', 'promedio_edad', 'score_sintomas', 'vacunacion_disponible', 'casos_ma3']
target = 'casos_confirmados'

def entrenar_modelo(agrupado, features, target):
    data_model = agrupado.dropna(subset=features + [target])
    
    scaler = MinMaxScaler(feature_range=(0.1, 0.9))
    X = scaler.fit_transform(data_model[features])
    y = data_model[target].values
    
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, 
        stratify=data_model['a√±o'])
    
    model = Sequential([
        Dense(128, input_dim=X_train.shape[1], activation='relu', kernel_regularizer='l2'),
        Dropout(0.3),
        Dense(64, activation='relu'),
        Dropout(0.2),
        Dense(32, activation='relu'),
        Dense(1, activation='linear')
    ])
    
    model.compile(optimizer='adam', loss='mse', metrics=['mae'])
    
    early_stop = EarlyStopping(monitor='val_loss', patience=20, restore_best_weights=True)
    history = model.fit(
        X_train, y_train, 
        epochs=200, 
        batch_size=16, 
        validation_split=0.2,
        callbacks=[early_stop],
        verbose=0)
    
    return model, scaler, X_test, y_test

model, scaler, X_test, y_test = entrenar_modelo(agrupado, features, target)

# ==================== PREDICCIONES FUTURAS ====================
print("üîÆ [4/6] Generando predicciones futuras...")

def generar_predicciones(model, scaler, agrupado, features):
    a√±os_historicos = [2022, 2023, 2024]
    a√±os_a_predecir = [2025, 2026]
    df_resultados = pd.DataFrame()
    
    for a√±o in a√±os_historicos:
        temp = agrupado[agrupado['a√±o'] == a√±o][['semana', 'casos_confirmados']].copy()
        temp['a√±o'] = a√±o
        temp['tipo'] = 'Real'
        temp.rename(columns={'casos_confirmados': 'casos'}, inplace=True)
        df_resultados = pd.concat([df_resultados, temp])
    
    semanas_base = agrupado[agrupado['a√±o'].isin(a√±os_historicos)].groupby('semana')[features].median()
    
    for a√±o in a√±os_a_predecir:
        factor = 1.1 if a√±o == 2025 else 0.9
        semanas_pred = semanas_base.copy() * factor
        
        X_pred = scaler.transform(semanas_pred)
        preds = model.predict(X_pred).flatten()
        
        temp = pd.DataFrame({
            'semana': semanas_pred.index,
            'casos': preds,
            'a√±o': a√±o,
            'tipo': 'Predicci√≥n'
        })
        df_resultados = pd.concat([df_resultados, temp])
    
    return df_resultados

df_resultados = generar_predicciones(model, scaler, agrupado, features)

# ==================== VISUALIZACIONES AVANZADAS ====================
print("üìä [5/6] Creando visualizaciones...")

def crear_visualizaciones(df_resultados, agrupado, df_vac):
    # 1. Gr√°fico interactivo de evoluci√≥n temporal
    fig = make_subplots(rows=2, cols=1, subplot_titles=("Evoluci√≥n Semanal de Casos", "Distribuci√≥n por A√±o"))
    
    colors = {'2022': '#636EFA', '2023': '#EF553B', '2024': '#00CC96', 
              '2025': '#AB63FA', '2026': '#FFA15A'}
    
    for a√±o in df_resultados['a√±o'].unique():
        df_plot = df_resultados[df_resultados['a√±o'] == a√±o]
        tipo = 'Real' if a√±o in [2022, 2023, 2024] else 'Predicci√≥n'
        
        fig.add_trace(go.Scatter(
            x=df_plot['semana'], y=df_plot['casos'],
            name=f"{a√±o} ({tipo})",
            line=dict(color=colors[str(a√±o)], width=2 if tipo == 'Real' else 1.5),
            line_dash=None if tipo == 'Real' else 'dash',
            mode='lines+markers',
            marker=dict(size=6 if tipo == 'Real' else 4)
        ), row=1, col=1)
        
        fig.add_trace(go.Box(
            y=df_plot['casos'], name=str(a√±o),
            marker_color=colors[str(a√±o)],
            showlegend=False
        ), row=2, col=1)
    
    fig.update_layout(
        title_text="<b>An√°lisis Predictivo de Dengue 2022-2026</b>",
        height=800, template='plotly_white',
        hovermode='x unified'
    )
    fig.show()
    
    # 2. An√°lisis de residuos
    y_pred = model.predict(X_test).flatten()
    residuos = y_test - y_pred
    
    fig_res = make_subplots(rows=1, cols=2, subplot_titles=("Distribuci√≥n de Residuos", "QQ Plot"))
    
    fig_res.add_trace(go.Histogram(
        x=residuos, name='Residuos', nbinsx=30,
        marker_color='#636EFA', opacity=0.75
    ), row=1, col=1)
    
    q_theoretical = stats.norm.ppf(np.linspace(0.01, 0.99, len(residuos)))
    q_sample = np.quantile(residuos, np.linspace(0.01, 0.99, len(residuos)))
    
    fig_res.add_trace(go.Scatter(
        x=q_theoretical, y=q_sample, mode='markers',
        marker=dict(color='#EF553B', size=8), name='QQ Plot'
    ), row=1, col=2)
    
    fig_res.add_shape(
        type="line", line=dict(dash='dash'),
        x0=min(q_theoretical), y0=min(q_theoretical),
        x1=max(q_theoretical), y1=max(q_theoretical),
        row=1, col=2
    )
    
    fig_res.update_layout(height=500, showlegend=False)
    fig_res.show()
    
    # 3. Descomposici√≥n temporal
    serie_completa = df_resultados.copy()
    serie_completa['fecha'] = pd.to_datetime(
        serie_completa['a√±o'].astype(str) + '-' + 
        serie_completa['semana'].astype(str) + '-1', 
        format='%Y-%W-%w')
    serie_completa = serie_completa.sort_values('fecha').set_index('fecha')['casos']
    
    if len(serie_completa) >= 52:
        descomp = seasonal_decompose(serie_completa, model='additive', period=52)
        
        fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(14, 10))
        fig.suptitle('Descomposici√≥n Temporal de Casos de Dengue', fontsize=16)
        
        ax1.plot(descomp.observed, color='#1f77b4')
        ax1.set_title('Casos Observados')
        ax1.grid(True, linestyle='--', alpha=0.6)
        
        ax2.plot(descomp.trend, color='#ff7f0e')
        ax2.set_title('Tendencia')
        ax2.grid(True, linestyle='--', alpha=0.6)
        
        ax3.plot(descomp.seasonal, color='#2ca02c')
        ax3.set_title('Estacionalidad')
        ax3.grid(True, linestyle='--', alpha=0.6)
        
        ax4.scatter(descomp.resid.index, descomp.resid, color='#d62728', s=15)
        ax4.axhline(0, color='black', linestyle='--', linewidth=0.8)
        ax4.set_title('Residuos')
        ax4.grid(True, linestyle='--', alpha=0.6)
        
        for ax in [ax1, ax2, ax3, ax4]:
            ax.xaxis.set_major_locator(mdates.YearLocator())
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
        
        plt.tight_layout()
        plt.show()
    
    # 4. Mapa de calor de s√≠ntomas
    sintomas = agrupado[['fiebre', 'vomito', 'dolor_abdo', 'cefalea']].mean().to_frame('Frecuencia')
    plt.figure(figsize=(8, 4))
    sns.heatmap(sintomas.T, annot=True, fmt=".2%", cmap="YlOrRd")
    plt.title("Frecuencia Relativa de S√≠ntomas")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
    
    # 5. Visualizaci√≥n de puntos de vacunaci√≥n (NUEVO)
    print("\nüìç Visualizaci√≥n de Puntos de Vacunaci√≥n:")
    df_vac['Capacidad Semanal'] = df_vac['Capacidad diaria (personas)'] * 7
    df_vac['Prioridad'] = pd.cut(df_vac['Capacidad Semanal'], 
                                bins=[0, 500, 1000, float('inf')],
                                labels=['Baja', 'Media', 'Alta'])
    
    # Gr√°fico de puntos de vacunaci√≥n por capacidad
    plt.figure(figsize=(12, 6))
    sns.barplot(data=df_vac.sort_values('Capacidad Semanal', ascending=False),
                x='Municipio', y='Capacidad Semanal', hue='Prioridad',
                palette={'Baja': 'yellow', 'Media': 'orange', 'Alta': 'red'})
    plt.title('Capacidad Semanal de Puntos de Vacunaci√≥n por Municipio', fontsize=14)
    plt.xlabel('Municipio', fontsize=12)
    plt.ylabel('Capacidad Semanal (personas)', fontsize=12)
    plt.xticks(rotation=45)
    plt.legend(title='Prioridad', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    plt.show()
    
    # Tabla resumen
    print("\nüè• Resumen de Puntos de Vacunaci√≥n:")
    print(df_vac.sort_values(['Prioridad', 'Capacidad Semanal'], ascending=[True, False])[[
        'Municipio', 'Punto', 'Edad m√≠nima (a√±os)', 
        'Edad m√°xima (a√±os)', 'Capacidad Semanal', 'Prioridad'
    ]].to_string(index=False))

crear_visualizaciones(df_resultados, agrupado, df_vac)

# ==================== INFORME Y EXPORTACI√ìN ====================
print("üíæ [6/6] Generando informe ejecutivo...")

def generar_informe(df_resultados, agrupado, df_vac):  # A√±adimos df_vac como par√°metro
    sintomas = agrupado[['fiebre', 'vomito', 'dolor_abdo', 'cefalea']].mean()
    
    informe = f"""
üìå INFORME EJECUTIVO DE DENGUE (2022-2026)
{'='*50}

üîπ DATOS HIST√ìRICOS:
- A√±os analizados: {", ".join(map(str, [2022, 2023, 2024]))}
- Total casos registrados: {int(agrupado['casos_confirmados'].sum()):,}
- Municipios afectados: {agrupado['nmun_resi'].nunique()}
- S√≠ntoma m√°s frecuente: {sintomas.idxmax()} ({sintomas.max():.1%})

üîπ PUNTOS DE VACUNACI√ìN:
- Total puntos: {len(df_vac)}
- Municipios con cobertura: {df_vac['Municipio'].nunique()}
- Capacidad semanal total: {df_vac['Capacidad Semanal'].sum():,} personas

üîπ PREDICCIONES 2025-2026:
- Casos esperados 2025: {int(df_resultados[df_resultados['a√±o'] == 2025]['casos'].sum()):,}
- Casos esperados 2026: {int(df_resultados[df_resultados['a√±o'] == 2026]['casos'].sum()):,}
- Tendencia: {'ALZA (‚Üë)' if df_resultados[df_resultados['a√±o'] == 2025]['casos'].mean() > df_resultados[df_resultados['a√±o'] == 2024]['casos'].mean() else 'BAJA (‚Üì)'}

üîπ RECOMENDACIONES:
1. Priorizar semanas: {', '.join(map(str, df_resultados.groupby('semana')['casos'].mean().nlargest(5).index.tolist()))}
2. Intensificar vigilancia en municipios con mayor incidencia hist√≥rica
3. Reforzar campa√±as de prevenci√≥n en temporada de lluvias
4. Optimizar distribuci√≥n de vacunas seg√∫n capacidad de puntos de vacunaci√≥n
5. Expandir cobertura en municipios sin puntos de vacunaci√≥n

üìÖ Fecha de generaci√≥n: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M')}
"""
    print(informe)
    
    os.makedirs('resultados', exist_ok=True)
    df_resultados.to_csv('resultados/predicciones_dengue.csv', index=False)
    df_vac.to_csv('resultados/puntos_vacunacion.csv', index=False)
    print("‚úÖ Resultados exportados:")
    print("- 'resultados/predicciones_dengue.csv'")
    print("- 'resultados/puntos_vacunacion.csv'")

generar_informe(df_resultados, agrupado, df_vac)
print("üéâ An√°lisis completado exitosamente!") 